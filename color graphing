#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100

int graph[MAX_VERTICES][MAX_VERTICES]; // Adjacency matrix representing the graph
int numVertices; // Number of vertices in the graph
int numColors; // Number of colors available
int colors[MAX_VERTICES]; // Array to store the color of each vertex

// Function to check if it's safe to assign a color to a vertex
bool isSafe(int v, int color) {
    for (int i = 0; i < numVertices; i++) {
        if (graph[v][i] && color == colors[i]) {
            return false;
        }
    }
    return true;
}

// Function to recursively assign colors to vertices
bool graphColoringUtil(int v) {
    if (v == numVertices) {
        return true; // All vertices are colored
    }

    // Try different colors for vertex v
    for (int c = 1; c <= numColors; c++) {
        if (isSafe(v, c)) {
            colors[v] = c;
            if (graphColoringUtil(v + 1)) {
                return true; // If coloring is possible with this color, return true
            }
            colors[v] = 0; // Backtrack: Unassign the color
        }
    }
    return false; // If no color can be assigned to this vertex
}

// Function to solve the graph coloring problem
void graphColoring() {
    if (graphColoringUtil(0)) {
        printf("The graph can be colored using at most %d colors:\n", numColors);
        for (int i = 0; i < numVertices; i++) {
            printf("Vertex %d: Color %d\n", i+1, colors[i]);
        }
    } else {
        printf("Graph cannot be colored using %d colors.\n", numColors);
    }
}

int main() {
    // Input the number of vertices
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &numVertices);

    // Input the adjacency matrix representing the graph
    printf("Enter the adjacency matrix (%d x %d) representing the graph:\n", numVertices, numVertices);
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Input the number of colors
    printf("Enter the number of colors available: ");
    scanf("%d", &numColors);

    // Initialize colors of all vertices as 0
    for (int i = 0; i < numVertices; i++) {
        colors[i] = 0;
    }

    // Solve the graph coloring problem
    graphColoring();

    return 0;
}
