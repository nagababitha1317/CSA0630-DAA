#include <stdio.h>
#include <stdlib.h>

// Structure to represent an item
struct Item {
    int value;
    int weight;
};

// Function to compare items based on their value-to-weight ratio
int compare(const void *a, const void *b) {
    double ratioA = (double)((struct Item *)a)->value / ((struct Item *)a)->weight;
    double ratioB = (double)((struct Item *)b)->value / ((struct Item *)b)->weight;
    return ratioB > ratioA ? 1 : -1;
}

// Function to solve the Fractional Knapsack problem using a greedy approach
void fractionalKnapsack(int capacity, struct Item items[], int n) {
    // Sort items based on their value-to-weight ratio
    qsort(items, n, sizeof(items[0]), compare);

    double totalValue = 0.0; // Total value of items selected
    int currentWeight = 0; // Current weight in the knapsack

    // Iterate through sorted items and add them to the knapsack
    for (int i = 0; i < n; i++) {
        // If adding the entire item exceeds the capacity, add a fraction of it
        if (currentWeight + items[i].weight <= capacity) {
            totalValue += items[i].value;
            currentWeight += items[i].weight;
        } else {
            int remainingWeight = capacity - currentWeight;
            totalValue += ((double)remainingWeight / items[i].weight) * items[i].value;
            break;
        }
    }

    printf("Maximum value in the knapsack: %.2lf\n", totalValue);
}

int main() {
    int capacity, n;

    // Input the capacity of the knapsack and the number of items
    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);
    printf("Enter the number of items: ");
    scanf("%d", &n);

    // Input the value and weight of each item
    struct Item items[n];
    printf("Enter the value and weight of each item:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d: ", i + 1);
        scanf("%d %d", &items[i].value, &items[i].weight);
    }

    // Solve the Fractional Knapsack problem
    fractionalKnapsack(capacity, items, n);

    return 0;
}
